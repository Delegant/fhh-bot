#!groovy
// Check ub1 properties
properties([disableConcurrentBuilds()])

// Servers:
// ----------------------------------------------------------------------------
server_ip = ""
db_ip = "172.17.0.1"
serverDevCredentials = "fhh-bot-credentials-id"
// ----------------------------------------------------------------------------

// Linear part of algorithm
// ----------------------------------------------------------------------------
pipeline {
    agent {
        label 'master'
    }
    options {
        buildDiscarder(logRotator(numToKeepStr: '10', artifactNumToKeepStr: '10'))
        timestamps()
    }
    stages {
        stage("Check and Replace Docker Image") {
            steps {
                script {
                    def dockerImageName = 'fhh-bot' // Без явно заданного тега

                    def containerExists = sh(script: "docker ps -a --format '{{.Names}}' | grep '^fhh-bot\$'", returnStatus: true) == 0
                    def imageExists = sh(script: "docker images -q $dockerImageName --format '{{.Repository}}' | grep '^$dockerImageName\$'", returnStatus: true) == 0
    
                    if (containerExists) {
                        sh "docker stop fhh-bot && docker rm fhh-bot" // Остановить и удалить существующий контейнер
                    }
    
                    if (dockerImageExists) {
                        sh "docker rmi $dockerImageName" // Удалить существующий образ
                    }
                }
            }
        }
        stage("Mvn build Tar") {
            steps {
                script {
                    withCredentials([
                            string(
                                    credentialsId: 'fhh-bot-credentials-id',
                                    variable: 'TOKEN'
                            ),
                            usernamePassword(
                                    credentialsId: 'server-db-credentials-id',
                                    passwordVariable: 'PASSWORD',
                                    usernameVariable: 'USERNAME')
                    ]) {
                        docker.image('maven:3.9-eclipse-temurin-17-alpine').inside("-v $HOME/.m2:/root/.m2"){
                            sh 'mvn compile jib:buildTar -Djib.container.environment=DB_USERNAME=$USERNAME,DB_PASSWORD=$PASSWORD,BOT_TOKEN=$TOKEN,DB_URL=jdbc:postgresql://172.17.0.1:5432/fhhdb'
                        }

                        sh 'docker load --input ./target/jib-image.tar'
                        sh 'docker run --name fhh-bot --rm -d fhh-bot:0.0.1-SNAPSHOT'
                    }
                }
            }
        }
    }
}
